package Controllers;

import Classes_de_Conexoes.UsuarioDTO;
import LoginUsuario.LoginModel;
import LoginUsuario.Usuario;
import LoginUsuario.UsuarioModel;
import Service.LoginService;
import jakarta.validation.Valid;
import org.springframework.beans.BeanUtils;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import java.util.List;
import java.util.Optional;

@RestController
@CrossOrigin(origins = "*", maxAge = 3600)
@RequestMapping("/usuario")
public class LoginController {

    final LoginService loginService;
    private LoginModel loginModel;

    public LoginController(LoginService loginService) {
        this.loginService = loginService;
    }

    @PostMapping
    public ResponseEntity<Object> saveUsuario(@RequestBody @Valid UsuarioDTO usuarioDTO) {
        if (loginService.existBySenha(usuarioDTO.getSenha_usuario())) {
            return ResponseEntity.status(HttpStatus.CONFLICT).body("Conflict: Senha is already in use!");
        }
        if (loginService.existByEmail(usuarioDTO.getEmail_usuario())) {
            return ResponseEntity.status(HttpStatus.CONFLICT).body("Conflict: Email is already in use!");
        }

        var usuarioModel = new UsuarioModel();
        BeanUtils.copyProperties(usuarioDTO, usuarioModel);
        return ResponseEntity.status(HttpStatus.CREATED).body(loginService.save(loginModel));
    }

    @GetMapping
    public ResponseEntity<List<Usuario>> getAllUsuarios() {
        return ResponseEntity.status(HttpStatus.OK).body(loginService.findAll());
    }

    @GetMapping("/{id}")
    public ResponseEntity<Object> getoneUsuario(@PathVariable(value = "id") Integer id) {
        Optional<Usuario> usuarioModelOptional = loginService.findById(id);
        if (!usuarioModelOptional.isPresent()) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Usuario not found.");
        }
        return ResponseEntity.status(HttpStatus.OK).body(usuarioModelOptional.get());
    }
}

